diff --git a/autoassignrole.admin.inc b/autoassignrole.admin.inc
index 4603285..cf8e3fb 100644
--- a/autoassignrole.admin.inc
+++ b/autoassignrole.admin.inc
@@ -117,9 +117,13 @@ function autoassignrole_user_settings() {
   $form['autoassignrole_user_selection'] = array(
     '#type' => 'radios',
     '#title' => t('Selection method'),
-    '#default_value' => variable_get('autoassignrole_user_selection', 0),
+    '#default_value' => variable_get('autoassignrole_user_selection', AUTOASSIGNROLE_ELEMENT_RADIO),
     '#description' => t('The type of form elements the end user will be presented with.'),
-    '#options' => array(0 => t('Radio Buttons'), 1 => t('Selection Box'), 2 => t('Check boxes')),
+    '#options' => array(
+      AUTOASSIGNROLE_ELEMENT_RADIO => t('Radio Buttons/Checkboxes'),
+      AUTOASSIGNROLE_ELEMENT_SELECT => t('Selection Box'),
+      AUTOASSIGNROLE_ELEMENT_CHECKBOX => t('Checkboxes'),
+    ),
   );
 
   $form['autoassignrole_user_required'] = array(
diff --git a/autoassignrole.module b/autoassignrole.module
index 9bbc308..f004df0 100644
--- a/autoassignrole.module
+++ b/autoassignrole.module
@@ -9,6 +9,14 @@
  * mechanism for new users to select a role or role for their account.
  */
 
+// Says to use element of type radio for role selection
+define('AUTOASSIGNROLE_ELEMENT_RADIO', 0);
+
+// Says to use element of type select for role selection
+define('AUTOASSIGNROLE_ELEMENT_SELECT', 1);
+
+// Says to use element of type select for checkbox selection
+define('AUTOASSIGNROLE_ELEMENT_CHECKBOX', 2);
 /**
  * Implements hook_permission().
  */
@@ -61,22 +69,83 @@ function autoassignrole_menu() {
 function autoassignrole_user_presave(&$edit, $account, $category) {
   // Use case http://drupal.org/node/971622
   // Make sure we only assign roles automatically when enabled to do so.
-  if (variable_get('autoassignrole_auto_active', 0)) {
-
+  if (variable_get('autoassignrole_auto_active', 0) || variable_get("autoassignrole_user_active", 0)) {
     // Use case http://drupal.org/node/944864
     // Only assign roles if this is a new account.
-    if (isset ($account->is_new) && !empty($account->is_new)) {
+    if (isset($account->is_new) && !empty($account->is_new)) {
       // Get the existing user roles with the exception of the anonymous role.
       $user_roles = user_roles(TRUE);
-      $auto_roles = variable_get('autoassignrole_auto_roles', array());
-      // Add autoassignrole_auto_roles to the $edit['roles'] array if they are
-      // valid.
-      foreach ($auto_roles as $rid) {
-        // Dealing with checkbox values so anything greater than zero is valid
-        if (!empty($rid) && array_key_exists($rid, $user_roles)) {
-          $edit['roles'][$rid] = $user_roles[$rid];
+      $roles_to_add = array();
+
+      // Add in automatic roles.
+      if (variable_get('autoassignrole_auto_active', 0)) {
+        $roles_to_add += array_intersect_key($user_roles, array_filter(variable_get('autoassignrole_auto_roles', array())));
+      }
+
+      // Add in user selected roles if any.
+      if (variable_get("autoassignrole_user_active", 0) && !empty($edit['user_roles'])) {
+        // Value is a single, convert to array
+        if (!is_array($edit['user_roles'])) {
+          $edit['user_roles'] = array($edit['user_roles'] => $edit['user_roles']);
         }
+        $roles_to_add += array_intersect_key($user_roles, array_filter($edit['user_roles']));
+      }
+
+      // Make sure the roles key exists.
+      if (!isset($edit['roles'])) {
+        $edit['roles'] = array();
+      }
+
+      // Add in the new roles to override the current roles.
+      $edit['roles'] = $roles_to_add + $edit['roles'];
+    }
+  }
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter() for user_register_form().
+ */
+function autoassignrole_form_user_register_form_alter(&$form, &$form_state) {
+  if (variable_get("autoassignrole_user_active", 0)) {
+
+    // Get a list of valid roles that can be selected.
+    $roles = array_intersect_key(user_roles(TRUE), array_filter(variable_get('autoassignrole_user_roles', array())));
+
+    if ($roles) {
+      $form['autoassignrole_user'] = array(
+        '#type' => 'fieldset',
+        '#title' =>  filter_xss(variable_get('autoassignrole_user_fieldset_title', t('User Roles'))),
+        '#collapsible' => FALSE,
+        '#collapsed' => FALSE,
+      );
+
+      // Sort the roles
+      if (variable_get('autoassignrole_user_selection', 'SORT_ASC') == 'SORT_ASC') {
+        asort($roles);
+      }
+      else {
+        arsort($roles);
+      }
+
+      $multiple = variable_get('autoassignrole_user_multiple', 0);
+      $user_selection = variable_get('autoassignrole_user_selection', AUTOASSIGNROLE_ELEMENT_RADIO);
+      $type = $user_selection == AUTOASSIGNROLE_ELEMENT_RADIO ? 'radios' : ($user_selection == AUTOASSIGNROLE_ELEMENT_CHECKBOX ? 'checkboxes' : 'select');
+
+      // If not multiple + not required + select box, need a none selection.
+      if (!$multiple && !variable_get('autoassignrole_user_required', 0) && $type == 'select') {
+        array_unshift(t('None'), $roles);
       }
+
+      // Add in the element
+      $form['autoassignrole_user']['user_roles'] = array(
+        '#type' => $type,
+        '#title' => filter_xss(variable_get('autoassignrole_user_title', t('Role'))),
+        '#options' => $roles,
+        '#description' => filter_xss(variable_get('autoassignrole_user_description', t('Select a role'))),
+        '#required' => variable_get('autoassignrole_user_required', 0),
+        '#multiple' => $multiple,
+        '#options' => $roles,
+      );
     }
   }
 }
